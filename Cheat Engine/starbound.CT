<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="28">
  <CheatEntries>
    <CheatEntry>
      <ID>84</ID>
      <Description>"Bloodybone"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>106</ID>
          <Description>"AobScan"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2</ID>
              <Description>"Get Base Ptr "</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(playerhsh,starbound.exe,F3 0F 10 47 54 F3 0F 5E)
alloc(newmem,$100,"starbound.exe") // Or starbound.Star::StatSet::resourcePercentage+41

label(code)
label(return)
label(playerbaseptr)
registersymbol(playerbaseptr)

newmem:
cmp r9l,6
je health
cmp r9l,4
je hunger
jmp code

health:
cmp [rdi],4878616D // String = maxHealth
jne stamina
mov [playerbaseptr],rdi
jmp code

stamina:
cmp [rdi+20],1 // Compare out something
je code
mov [playerbaseptr+8],rdi
jmp code

hunger:
mov [playerbaseptr+10],rdi
jmp code

code:
  movss xmm0,[rdi+54]
  jmp return

playerbaseptr:
dq 0

playerhsh:
  jmp newmem
return:
registersymbol(playerhsh)

[DISABLE]

playerhsh:
  db F3 0F 10 47 54

unregistersymbol(playerhsh)
dealloc(newmem)
unregistersymbol(playerbaseptr)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>3</ID>
                  <Description>"Current Health"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[playerbaseptr]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4</ID>
                  <Description>"Max Health"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[playerbaseptr]+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5</ID>
                  <Description>"Current Stamina"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[playerbaseptr+8]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6</ID>
                  <Description>"Max Stamina"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[playerbaseptr+8]+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7</ID>
                  <Description>"Current Hunger"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[playerbaseptr+10]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>8</ID>
                  <Description>"Max Hunger"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[playerbaseptr+8]+58</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>13</ID>
              <Description>"Get Pixels Ptr"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(getcurrency,starbound.exe,48 39 42 20 75 3D)
alloc(newmem,$100,"starbound.exe"+27999A)

label(code)
label(return)
label(currencyptr)
registersymbol(currencyptr)

newmem:
cmp r9l,7
je code

mov [currencyptr],rdx

code:
  cmp [rdx+20],rax
  jne "starbound.Star::mapsEqual&lt;Star::MapMixin&lt;Star::FlatHashMap&lt;Star::String,unsigned __int64,Star::hash&lt;Star::String,void&gt;,std::equal_to&lt;Star::String&gt;,std::allocator&lt;std::pair&lt;Star::String const ,unsigned __int64&gt; &gt; &gt; &gt;,Star::MapMixin&lt;Star::FlatHashMap&lt;Star::String,unsigned __int64,Star::hash&lt;Star::String,void&gt;,std::equal_to&lt;Star::String&gt;,std::allocator&lt;std::pair&lt;Star::String const ,unsigned __int64&gt; &gt; &gt; &gt; &gt;"+ED
  jmp return

currencyptr:
dq 0

getcurrency:
  jmp newmem
  nop
return:
registersymbol(getcurrency)

[DISABLE]

getcurrency:
  db 48 39 42 20 75 3D

unregistersymbol(getcurrency)
dealloc(newmem)
dealloc(newmem)
unregistersymbol(currencyptr)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>12</ID>
                  <Description>"Pixels"</Description>
                  <VariableType>8 Bytes</VariableType>
                  <Address>[currencyptr]+20</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>14</ID>
              <Description>"Don't lose Pixels"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(nocurrencylossondeath,starbound.exe,48 29 18 B0 01)

nocurrencylossondeath:
  db 90 90 90

registersymbol(nocurrencylossondeath)

[DISABLE]

nocurrencylossondeath:
  db 48 29 18

unregistersymbol(nocurrencylossondeath)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>16</ID>
              <Description>"Get Item Base on hover over Item"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(getitembase,starbound.exe,48 0F AF 41 60)
alloc(newmem,$100,"starbound.exe"+258DC7)

label(code)
label(return)
label(ibase)
registersymbol(ibase)

newmem:

code:
  mov [ibase],rcx
  imul rax,[rcx+60]
  jmp return

ibase:
dq 0

getitembase:
  jmp newmem
return:
registersymbol(getitembase)

[DISABLE]

getitembase:
  db 48 0F AF 41 60

unregistersymbol(getitembase)
dealloc(newmem)
unregistersymbol(ibase)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>17</ID>
                  <Description>"Current Stack"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+60</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>18</ID>
                  <Description>"Max Stack"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+80</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>53</ID>
                  <Description>"Item ID (Read Only)"</Description>
                  <VariableType>String</VariableType>
                  <Length>50</Length>
                  <Unicode>0</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>[ibase]+40</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>51</ID>
                  <Description>"Name"</Description>
                  <VariableType>String</VariableType>
                  <Length>50</Length>
                  <Unicode>0</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>[ibase]+88</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>52</ID>
                  <Description>"Category"</Description>
                  <VariableType>String</VariableType>
                  <Length>50</Length>
                  <Unicode>0</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>[ibase]+138</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>101</ID>
                  <Description>"Pixels worth"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+F0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>104</ID>
                  <Description>"Item ID Lenghts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+50</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>102</ID>
                  <Description>"Category Name Lenghts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+148</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>103</ID>
                  <Description>"Name Lenghts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+98</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>19</ID>
              <Description>"Max out all Items"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(everitemfullstack,starbound.exe,4C 8B 43 60 48 8B D0)
alloc(newmem,$100,"starbound.exe"+2585FD)

label(code)
label(return)

newmem:

code:
  mov r8,[rbx+80]
  mov [rbx+60],r8
  mov r8,[rbx+60]
  mov rdx,rax
  jmp return

everitemfullstack:
  jmp newmem
  nop
  nop
return:
registersymbol(everitemfullstack)

[DISABLE]

everitemfullstack:
  db 4C 8B 43 60 48 8B D0

unregistersymbol(everitemfullstack)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>20</ID>
              <Description>"No Item consume on placing"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(noitemconsume,starbound.exe,72 0A 48 2B C2)
registersymbol(noitemconsume)

noitemconsume:
  db EB 0C

[DISABLE]

noitemconsume:
  db 72 0A

unregistersymbol(noitemconsume)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>21</ID>
              <Description>"Intsant break Block"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(instabreakblock,starbound.exe,72 11 48 8B CA E8 2C)
registersymbol(instabreakblock)

instabreakblock:
  db 90 90

[DISABLE]

instabreakblock:
  db 72 11

unregistersymbol(instabreakblock)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>189</ID>
              <Description>"Infinite Health Alternative"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(infinitehealthalternate_aob,starbound.exe,89 43 54 F3 0F 10 43 54 48 83)
alloc(newmem,$100,"starbound.exe"+4ECC32)

label(code)
label(return)

newmem:
cmp [rbx-20],'heal'
jne short code
  cmp [rbx+1C0],'food'
  jne short code
    sub rsp,4
    movss [rsp],xmm2 // Max
    mov eax,[rsp]
    add rsp,4
code:
  mov [rbx+54],eax
  movss xmm0,[rbx+54]
  jmp return

infinitehealthalternate_aob:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(infinitehealthalternate_aob)

[DISABLE]

infinitehealthalternate_aob:
  db 89 43 54 F3 0F 10 43 54

unregistersymbol(infinitehealthalternate_aob)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>192</ID>
              <Description>"Infinite Health Alternative Mod"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(setstat_aob,starbound.exe,8B 00 0F 28 74 24 20)
alloc(newmem,$1000,"starbound.exe"+4ECC2B)

label(code)
label(return)

newmem:
cmp [rbx-20],'heal'
jne short code
cmp [rbx+F0],'food'
jne short code

movss [rax],xmm2 // Max Stat

code:
  mov eax,[rax]
  movaps xmm6,[rsp+20]
  jmp return

setstat_aob:
  jmp newmem
  nop
  nop
return:
registersymbol(setstat_aob)

[DISABLE]

setstat_aob:
  db 8B 00 0F 28 74 24 20

unregistersymbol(setstat_aob)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>25</ID>
              <Description>"Max Breath/Inf Health/One Hit Kill"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(breathhealthenemy,starbound.exe,F3 0F 58 70 54)
alloc(newmem,$100,"starbound.exe")

label(code)
label(return)
label(breath)
label(health)
label(enemy)
label(breathptr)
label(enemyptr)
label(infbreath)
label(infhealth)
label(instakill)
registersymbol(breathptr)
registersymbol(enemyptr)
registersymbol(infbreath)
registersymbol(infhealth)
registersymbol(instakill)

newmem:
cmp [rax+A],'rForce'
je breath
cmp [rax+98],0
je health
jmp enemy

breath:
mov [breathptr],rax
cmp [infbreath],1
jne code
mov [rax+54],(float)100
jmp code

health:
cmp [rax+180],'rofile'
jne enemy
cmp [infhealth],1
jne code
push rbx
mov rbx,[rax+58] // Max Health
mov [rax+54],rbx
pop rbx
jmp code

enemy:
mov [enemyptr],rax
cmp [instakill],1
jne code
push rbx
mov rbx,[rax+54]
sub [rax+54],rbx
pop rbx
jmp code

code:
  addss xmm6,[rax+54]
  jmp return

breathptr:
dq 0

enemyptr:
dq 0

infbreath:
dd 0

infhealth:
dd 0

instakill:
dd 0

breathhealthenemy:
  jmp newmem
return:
registersymbol(breathhealthenemy)

[DISABLE]

breathhealthenemy:
  db F3 0F 58 70 54

unregistersymbol(breathhealthenemy)
dealloc(newmem)
unregistersymbol(breathptr)
unregistersymbol(enemyptr)
unregistersymbol(infbreath)
unregistersymbol(infhealth)
unregistersymbol(instakill)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>26</ID>
                  <Description>"Current Breath"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[breathptr]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>27</ID>
                  <Description>"Max Breath"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[breathptr]+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>29</ID>
                  <Description>"Last Hit Enemy Current Health"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[enemyptr]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>30</ID>
                  <Description>"Last Hit Enemy Max Health"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[enemyptr]+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>31</ID>
                  <Description>"Inf Health"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
infhealth:
dd 1

[DISABLE]
infhealth:
dd 0
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>32</ID>
                  <Description>"One Hit Kill"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
instakill:
dd 1

[DISABLE]
instakill:
dd 0
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>28</ID>
                  <Description>"Inf Breath"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
infbreath:
dd 1

[DISABLE]
infbreath:
dd 0
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>36</ID>
              <Description>"Inf Jumps + Slow Fall/No Fall Damage"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(infjumps,starbound.exe,74 0E 33 D2 48 8D 8E D0 07 00 00)
registersymbol(infjumps)

infjumps:
  db EB

[DISABLE]

infjumps:
  db 74

unregistersymbol(infjumps)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>38</ID>
              <Description>"Inf Jumps"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(grounded,starbound.exe,0F B6 81 E8 07 00 00)
alloc(newmem,$100,"starbound.exe"+2F9FC0)

label(code)
label(return)

newmem:
cmp r13l,FF
jne code
// Inf Jumps
mov byte ptr [rcx+000007E8],01
jmp code

code:
  movzx eax,byte ptr [rcx+000007E8]
  jmp return

grounded:
  jmp newmem
  nop
  nop
return:
registersymbol(grounded)

[DISABLE]

grounded:
  db 0F B6 81 E8 07 00 00

unregistersymbol(grounded)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>57</ID>
              <Description>"Debug Mode"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(enabledebugmode,starbound.exe,E8 * * * * 84 C0 75 * E8 * * * * F3) //E8 * * * * = call starbound.Star::ClientCommandProcessor::debugDisplayEnabled
alloc(debugger_bkb,5)
debugger_bkb:
  readmem(enabledebugmode,5)
enabledebugmode:
  db 90 90 90 90 90

registersymbol(enabledebugmode)
registersymbol(debugger_bkb)

[DISABLE]

enabledebugmode:
  readmem(debugger_bkb,5)

unregistersymbol(enabledebugmode)
unregistersymbol(debugger_bkb)
dealloc(debugger_bkb)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>75</ID>
              <Description>"Player Coords"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//RCX==Base
[ENABLE]
aobscanmodule(getcoords,starbound.exe,4C 8B C0 48 8D 4B 30 48 8D 54 24 28 E8)
alloc(newmem,$100,"starbound.exe"+554900)

label(code)
label(return)
label(pcoords)
registersymbol(pcoords)

newmem:
mov [pcoords],rcx

code:
  mov r8,rax
  lea rcx,[rbx+30]
  jmp return

pcoords:
dq 0

getcoords:
  jmp newmem
  nop
  nop
return:
registersymbol(getcoords)

[DISABLE]

getcoords:
  db 4C 8B C0 48 8D 4B 30

unregistersymbol(getcoords)
dealloc(newmem)
unregistersymbol(pcoords)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>77</ID>
                  <Description>"X-Coord"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[pcoords]+308</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>76</ID>
                  <Description>"Y-Coord"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[pcoords]+3a8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>61</ID>
              <Description>"Cursor Coords"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(getplayeraim,starbound.exe,F2 0F 11 87 3C 06 00 00 48 83)
alloc(newmem,$100,"starbound.exe"+3D0C55)

label(code)
label(return)
label(cursor_coords)
registersymbol(cursor_coords)

newmem:

code:
  mov [cursor_coords],rdi
  movsd [rdi+0000063C],xmm0
  jmp return

cursor_coords:
dq 0

getplayeraim:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(getplayeraim)

[DISABLE]

getplayeraim:
  db F2 0F 11 87 3C 06 00 00

unregistersymbol(getplayeraim)
dealloc(newmem)
unregistersymbol(cursor_coords)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>62</ID>
                  <Description>"Cursor Postion 1"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[cursor_coords]+63C</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>72</ID>
                  <Description>"Cursor Position 2"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[cursor_coords]+640</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>64</ID>
              <Description>"Get Gravity"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(getgravity,starbound.exe,F3 0F 10 40 34)
alloc(newmem,$100,"starbound.exe"+6C2133)

label(code)
label(return)
label(gravityptr)
registersymbol(gravityptr)

newmem:
cmp [rsp+68],starbound.Star::WorldClient::gravity+147 // Return Address for Gravity
jne code
mov [gravityptr],rax

code:
  movss xmm0,[rax+34]
  jmp return

gravityptr:
dq 0

getgravity:
  jmp newmem
return:
registersymbol(getgravity)

[DISABLE]

getgravity:
  db F3 0F 10 40 34

unregistersymbol(getgravity)
dealloc(newmem)
unregistersymbol(gravityptr)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>67</ID>
                  <Description>"Gravity"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[gravityptr]+34</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>178</ID>
              <Description>"Set Gravity"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(setgravity,starbound.exe,0F 28 F0 80 7F 04 00)
alloc(newmem,$1000,"starbound.exe"+617267)

label(code)
label(return)
label(setgravityvalue)
registersymbol(setgravityvalue)

newmem:
movss xmm0,[setgravityvalue]

code:
  movaps xmm6,xmm0
  cmp byte ptr [rdi+04],00
  jmp return

setgravityvalue:
dd (float)80

setgravity:
  jmp newmem
  nop
  nop
return:
registersymbol(setgravity)

[DISABLE]

setgravity:
  db 0F 28 F0 80 7F 04 00

unregistersymbol(setgravity)
dealloc(newmem)
unregistersymbol(setgravityvalue)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>179</ID>
                  <Description>"Gravity to set to"</Description>
                  <VariableType>Float</VariableType>
                  <Address>setgravityvalue</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>68</ID>
              <Description>"Full Bright"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(fullbright,starbound.exe,74 * 44 89 75 28)
alloc(fullbright_bkb,2)
fullbright_bkb:
  readmem(fullbright,2)
fullbright:
  db 90 90

registersymbol(fullbright)
registersymbol(fullbright_bkb)

[DISABLE]

fullbright:
  readmem(fullbright_bkb,2)

unregistersymbol(fullbright)
dealloc(fullbright_bkb)
unregistersymbol(fullbright_bkb)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>70</ID>
              <Description>"Fixed Camera"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(fixedcamera,starbound.exe,E8 * * * * 84 C0 0F 85 * * * * 48 8D 55 80)
alloc(fixedcamera_bkb,5)
fixedcamera_bkb:
  readmem(fixedcamera,5)
fixedcamera:
  db 90 90 90 90 90

registersymbol(fixedcamera_bkb)
registersymbol(fixedcamera)

[DISABLE]

fixedcamera:
  readmem(fixedcamera_bkb,5)

unregistersymbol(fixedcamera)
dealloc(fixedcamera_bkb)
unregistersymbol(fixedcamera_bkb)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>48</ID>
              <Description>"Teleport Activation"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{
RCX==Base to Coords
+308=x-Coord
+3A8=y-Coord
}
[ENABLE]
aobscanmodule(teleportscript,starbound.exe,33 C9 48 89 8D A8 02 00 00)
alloc(newmem,$1000,"starbound.exe"+3DF40E)

label(code)
label(return)
label(savec)
label(save)
label(load)
label(savef)
label(loadf)
registersymbol(savec)
registersymbol(savef)
registersymbol(loadf)

newmem:
cmp [savef],1
je save
cmp [loadf],1
je load
jmp code

save:
mov [savef],0
push rax
mov rax,[rcx+308]
mov [savec],rax
mov rax,[rcx+3A8]
mov [savec+8],rax
pop rax
jmp code

load:
mov [loadf],0
push rax
mov rax,[savec]
mov [rcx+308],rax
mov rax,[savec+8]
mov [rcx+3A8],rax
pop rax
jmp code

code:
  xor ecx,ecx
  mov [rbp+000002A8],rcx
  jmp return
savef:
dd 0

loadf:
dd 0

savec:
dq 0

// Nothing Benease this because theres y stored

teleportscript:
  jmp newmem
  nop
  nop
  nop
  nop
return:
registersymbol(teleportscript)

[DISABLE]

teleportscript:
  db 33 C9 48 89 8D A8 02 00 00

unregistersymbol(teleportscript)
dealloc(newmem)
unregistersymbol(savec)
unregistersymbol(savef)
unregistersymbol(loadf)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>172</ID>
                  <Description>"Save Current Location"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>savef</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>173</ID>
                  <Description>"Teleport to Save"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>loadf</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>78</ID>
                  <Description>"Saved X-Pos"</Description>
                  <VariableType>Float</VariableType>
                  <Address>savec</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>79</ID>
                  <Description>"Saved Y-Pos"</Description>
                  <VariableType>Float</VariableType>
                  <Address>savec+8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>81</ID>
              <Description>"Teleport to Cursor Activation"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(telemouse1,starbound.exe,F3 0F 10 8B 3C 06 00 00)
alloc(newmem,$1000,"starbound.exe"+3DF7B0)

label(code)
label(return)
label(cursortelex)
label(cursorteley)
registersymbol(cursortelex)
registersymbol(cursorteley)

newmem:
push rdi
mov rdi,[rbx+0000063C]
mov [cursortelex],rdi
mov rdi,[rbx+00000640]
mov [cursorteley],rdi
pop rdi

code:
  movss xmm1,[rbx+0000063C]
  jmp return

cursortelex:
dq 0

cursorteley:
dq 0

telemouse1:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(telemouse1)

[DISABLE]

telemouse1:
  db F3 0F 10 8B 3C 06 00 00

unregistersymbol(telemouse1)
dealloc(newmem)
unregistersymbol(cursortelex)
unregistersymbol(cursorteley)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>82</ID>
                  <Description>"Teleport to Cursor Activation Player"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscanmodule(telecursor,starbound.exe,F3 0F 10 93 08 03 00 00)
alloc(newmem,$1000,"starbound.exe"+2F6AEF)

label(code)
label(return)
label(teleporttocursor)
label(teleporttocursor_enable)
registersymbol(teleporttocursor_enable)

newmem:
cmp r12d,FFFFFFFF
jne code
cmp [rbx+8C],3ECCCCCD
jne code
cmp [rbx+DC],3F000000
jne code

cmp [teleporttocursor_enable],1
je teleporttocursor

code:
  movss xmm2,[rbx+00000308]
  jmp return

teleporttocursor:
mov [teleporttocursor_enable],0
push rdi
mov rdi,[cursortelex]
mov [rbx+00000308],rdi
mov rdi,[cursorteley]
mov [rbx+000003A8],rdi
pop rdi
jmp code

teleporttocursor_enable:
dd 0

telecursor:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(telecursor)

[DISABLE]

telecursor:
  db F3 0F 10 93 08 03 00 00

unregistersymbol(telecursor)
dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>83</ID>
                      <Description>"Telport to Cursor"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                      <VariableType>4 Bytes</VariableType>
                      <Address>teleporttocursor_enable</Address>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>4</Key>
                          </Keys>
                          <Value>1</Value>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>87</ID>
              <Description>"Craft whenever you want"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(crafteveything,starbound.exe,E8 * * * * 0F B6 D0 48 8B CB E8 * * * * 49 8B 5D)
alloc(crafteveything_bkb,5)
crafteveything_bkb:
  readmem(crafteveything,5)
crafteveything:
db 90 90 90 90 90

registersymbol(crafteveything)
registersymbol(crafteveything_bkb)

[DISABLE]

crafteveything:
  readmem(crafteveything_bkb,5)

unregistersymbol(crafteveything_bkb)
unregistersymbol(crafteveything)
dealloc(crafteveything_bkb)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>186</ID>
              <Description>"Mech Energy"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>// xmm0 == current _ 0     double
// xmm3 == 0 _ max _ 0 _ 0 float
define(bytes,41 0F 11 06 C6 47 0A 00)

[ENABLE]
aobscanmodule(getmechenergy,starbound.exe,41 0F 11 06 C6 47 0A 00)
alloc(newmem,$100,"starbound.exe"+45C63)
registersymbol(getmechenergy)

label(code)
label(return)
label(mechptr)
label(infmechf)
registersymbol(infmechf)
registersymbol(mechptr)

newmem:
cmp [rsp+10],starbound.math_max
jne code
cmp [rsp+48],starbound.luaV_execute+361
jne code
cmp [r14],0
je code
cmp [r14+98],'lava'
jne code
// Get Mech Pointer
mov [mechptr],r14
cmp [infmechf],1
jne code
// Acctually do stuff
sub rsp,16
movdqu [rsp],xmm2
movaps xmm2,xmm3
shufps xmm2,xmm2,55 // Now xmm2 = max _ max _ max _ max
cvtss2sd xmm0,xmm2
movdqu xmm2,[rsp]
add rsp,16

code:
  movups [r14],xmm0
  mov byte ptr [rdi+0A],00
  jmp return

mechptr:
dq 0

infmechf:
dd 0

getmechenergy:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]

getmechenergy:
  db bytes

dealloc(newmem)
unregistersymbol(mechptr)
unregistersymbol(infmechf)
unregistersymbol(getmechenergy)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>187</ID>
                  <Description>"Current Mech Energy"</Description>
                  <VariableType>Double</VariableType>
                  <Address>[mechptr]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>188</ID>
                  <Description>"Inf Mech Energy"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
[ENABLE]
writeBytes("infmechf",1)

[DISABLE]
writeBytes("infmechf",0)
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>90</ID>
              <Description>"Ship Level"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(shipupgradelvl,starbound.exe,FF 48 8B D9 8B 02 89 01 8B 42 04)
alloc(newmem,$100,"starbound.exe"+1A7FB6)

label(code)
label(return)
label(shiplvl)
registersymbol(shiplvl)

newmem:
cmp [rsp+38],starbound.Star::ServerClientContext::shipUpgrades+4C
jne code
mov [shiplvl],rdx

code:
  mov eax,[rdx]
  mov [rcx],eax
  mov eax,[rdx+04]
  jmp return

shiplvl:
dq 0

shipupgradelvl+04:
  jmp newmem
  nop
  nop
return:
registersymbol(shipupgradelvl)

[DISABLE]

shipupgradelvl+04:
  db 8B 02 89 01 8B 42 04

unregistersymbol(shipupgradelvl)
dealloc(newmem)
unregistersymbol(shiplvl)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>91</ID>
                  <Description>"Ship Level"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[shiplvl]</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>99</ID>
              <Description>"Get Is admin Pointer"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(isadmin,starbound.exe,0F B6 81 98 03 00 00)
alloc(newmem,$100,"starbound.exe"+1AB040) // starbound.Star::ClientContext::isAdmin

label(code)
label(return)
label(isadminptr)
registersymbol(isadminptr)

newmem:
mov [isadminptr],rcx

code:
  movzx eax,byte ptr [rcx+00000398]
  jmp return

isadminptr:
dq 0

isadmin:
  jmp newmem
  nop
  nop
return:
registersymbol(isadmin)

[DISABLE]

isadmin:
  db 0F B6 81 98 03 00 00

unregistersymbol(isadmin)
dealloc(newmem)
unregistersymbol(isadminptr)


</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>100</ID>
                  <Description>"Is Player Admin?"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>Byte</VariableType>
                  <Address>[isadminptr]+398</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>0</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>107</ID>
          <Description>"Full Injection"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>108</ID>
              <Description>"Get Base Ptr "</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,starbound.Star::StatSet::resourcePercentage+41)
define(bytes,F3 0F 10 47 54)

[ENABLE]

assert(address,bytes)
alloc(newmem,$100,starbound.Star::StatSet::resourcePercentage+41)

label(code)
label(return)
label(health)
label(stamina)
label(hunger)
label(healthptr)
label(staminaptr)
label(hungerptr)
registersymbol(healthptr)
registersymbol(staminaptr)
registersymbol(hungerptr)

newmem:
cmp r9l,6
je health
cmp r9l,4
je hunger
jmp code

health:
cmp [rdi],4878616D // String
jne stamina
mov [healthptr],rdi
jmp code

stamina:
cmp [rdi+20],1 // Compare out something
je code
mov [staminaptr],rdi
jmp code

hunger:
mov [hungerptr],rdi
jmp code

code:
  movss xmm0,[rdi+54]
  jmp return

healthptr:
dq 0

staminaptr:
dq 0

hungerptr:
dq 0

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(healthptr)
unregistersymbol(staminaptr)
unregistersymbol(hungerptr)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>109</ID>
                  <Description>"Current Health"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[healthptr]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>110</ID>
                  <Description>"Max Health"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[healthptr]+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>111</ID>
                  <Description>"Current Stamina"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[staminaptr]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>112</ID>
                  <Description>"Max Stamina"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[staminaptr]+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>113</ID>
                  <Description>"Current Hunger"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[hungerptr]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>114</ID>
                  <Description>"Max Hunger"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[hungerptr]+58</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>115</ID>
              <Description>"Get Pixels Ptr"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,"starbound.exe"+27B98A)
define(bytes,48 39 42 20 75 3D)

[ENABLE]
assert(address,bytes)
alloc(newmem,$100,"starbound.exe"+27B98A)

label(code)
label(return)
label(currencyptr)
registersymbol(currencyptr)

newmem:
cmp r9l,7
je code

mov [currencyptr],rdx

code:
  cmp [rdx+20],rax
  jne "starbound.Star::mapsEqual&lt;Star::MapMixin&lt;Star::FlatHashMap&lt;Star::String,unsigned __int64,Star::hash&lt;Star::String,void&gt;,std::equal_to&lt;Star::String&gt;,std::allocator&lt;std::pair&lt;Star::String const ,unsigned __int64&gt; &gt; &gt; &gt;,Star::MapMixin&lt;Star::FlatHashMap&lt;Star::String,unsigned __int64,Star::hash&lt;Star::String,void&gt;,std::equal_to&lt;Star::String&gt;,std::allocator&lt;std::pair&lt;Star::String const ,unsigned __int64&gt; &gt; &gt; &gt; &gt;"+ED
  jmp return

currencyptr:
dq 0

address:
  jmp newmem
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(currencyptr)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>116</ID>
                  <Description>"Pixels"</Description>
                  <VariableType>8 Bytes</VariableType>
                  <Address>[currencyptr]+20</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>117</ID>
              <Description>"Don't lose Pixels"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
assert(starbound.Star::PlayerInventory::consumeCurrency+34,48 29 18)

starbound.Star::PlayerInventory::consumeCurrency+34:
  db 90 90 90

[DISABLE]

starbound.Star::PlayerInventory::consumeCurrency+34:
  db 48 29 18
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>118</ID>
              <Description>"Get Item Base on hover over Item"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,starbound.Star::Item::price+7)
define(bytes,48 0F AF 41 60)

[ENABLE]

assert(address,bytes)
alloc(newmem,$100,starbound.Star::Item::price+7)

label(code)
label(return)
label(ibase)
registersymbol(ibase)

newmem:

code:
  mov [ibase],rcx
  imul rax,[rcx+60]
  jmp return

ibase:
dq 0

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(ibase)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>119</ID>
                  <Description>"Current Stack"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+60</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>120</ID>
                  <Description>"Max Stack"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+80</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>121</ID>
                  <Description>"Item ID (Read Only)"</Description>
                  <VariableType>String</VariableType>
                  <Length>50</Length>
                  <Unicode>0</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>[ibase]+40</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>122</ID>
                  <Description>"Name"</Description>
                  <VariableType>String</VariableType>
                  <Length>50</Length>
                  <Unicode>0</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>[ibase]+88</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>123</ID>
                  <Description>"Category"</Description>
                  <VariableType>String</VariableType>
                  <Length>50</Length>
                  <Unicode>0</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>[ibase]+138</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>124</ID>
                  <Description>"Pixels worth"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+F0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>125</ID>
                  <Description>"Item ID Lenghts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+50</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>126</ID>
                  <Description>"Category Name Lenghts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+148</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>127</ID>
                  <Description>"Name Lenghts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[ibase]+98</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>128</ID>
              <Description>"Max out all Items"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,starbound.Star::Item::descriptor+5D)
define(bytes,4C 8B 43 60 48 8B D0)

[ENABLE]

assert(address,bytes)
alloc(newmem,$100,starbound.Star::Item::descriptor+5D)

label(code)
label(return)

newmem:

code:
  mov r8,[rbx+80]
  mov [rbx+60],r8
  mov r8,[rbx+60]
  mov rdx,rax
  jmp return

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>129</ID>
              <Description>"No Item consume on placing"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
assert(starbound.Star::Item::consume+7,72)

starbound.Star::Item::consume+7:
db EB

[DISABLE]
starbound.Star::Item::consume+7:
db 72
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>130</ID>
              <Description>"Intsant break Block"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
assert(starbound.Star::MaterialDatabase::materialDamageParameters+1A,72 11)

starbound.Star::MaterialDatabase::materialDamageParameters+1A:
db 90 90

[DISABLE]
starbound.Star::MaterialDatabase::materialDamageParameters+1A:
db 72 11
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>190</ID>
              <Description>"Infinite Health Alternative"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,"starbound.exe"+4ECC32)
define(bytes,89 43 54 F3 0F 10 43 54)

[ENABLE]
assert(address,bytes)
alloc(newmem,$100,"starbound.exe"+4ECC32)

label(code)
label(return)

newmem:
cmp [rbx-20],'heal'
jne short code
  cmp [rbx+1C0],'food'
  jne short code
    sub rsp,4
    movss [rsp],xmm2 // Max
    mov eax,[rsp]
    add rsp,4
code:
  mov [rbx+54],eax
  movss xmm0,[rbx+54]
  jmp return

address:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>191</ID>
              <Description>"Infinite Health Alternative Mod"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,"starbound.exe"+4ECC2B)
define(bytes,8B 00 0F 28 74 24 20)

[ENABLE]
assert(address,bytes)
alloc(newmem,$100,"starbound.exe"+4ECC2B)

label(code)
label(return)

newmem:
cmp [rbx-20],'heal'
jne short code
cmp [rbx+F0],'food'
jne short code

movss [rax],xmm2 // Max Stat

code:
  mov eax,[rax]
  movaps xmm6,[rsp+20]
  jmp return

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(setstat_data)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>131</ID>
              <Description>"Max Breath/Inf Health/One Hit Kill"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,starbound.Star::StatSet::modifyResourceValue+14)
define(bytes,F3 0F 58 70 54)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000,"starbound.exe")

label(code)
label(return)
label(breath)
label(health)
label(enemy)
label(breathptr)
label(enemyptr)
label(infbreath)
label(infhealth)
label(instakill)
registersymbol(breathptr)
registersymbol(enemyptr)
registersymbol(infbreath)
registersymbol(infhealth)
registersymbol(instakill)

newmem:
cmp [rax+A],'rForce'
je breath
cmp [rax+98],0
je health
jmp enemy

breath:
mov [breathptr],rax
cmp [infbreath],1
jne code
mov [rax+54],(float)100
jmp code

health:
cmp [rax+180],'rofile'
jne enemy
cmp [infhealth],1
jne code
push rbx
mov rbx,[rax+58] // Max Health
mov [rax+54],rbx
pop rbx
jmp code

enemy:
mov [enemyptr],rax
cmp [instakill],1
jne code
push rbx
mov rbx,[rax+54]
sub [rax+54],rbx
pop rbx
jmp code

code:
  addss xmm6,[rax+54]
  jmp return

breathptr:
dq 0

enemyptr:
dq 0

infbreath:
dd 0

infhealth:
dd 0

instakill:
dd 0

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(breathptr)
unregistersymbol(enemyptr)
unregistersymbol(infbreath)
unregistersymbol(infhealth)
unregistersymbol(instakill)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>132</ID>
                  <Description>"Current Breath"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[breathptr]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>133</ID>
                  <Description>"Max Breath"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[breathptr]+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>134</ID>
                  <Description>"Last Hit Enemy Current Health"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[enemyptr]+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>135</ID>
                  <Description>"Last Hit Enemy Max Health"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[enemyptr]+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>136</ID>
                  <Description>"Inf Health"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
infhealth:
dd 1

[DISABLE]
infhealth:
dd 0
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>137</ID>
                  <Description>"One Hit Kill"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
instakill:
dd 1

[DISABLE]
instakill:
dd 0
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>138</ID>
                  <Description>"Inf Breath"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
infbreath:
dd 1

[DISABLE]
infbreath:
dd 0
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>139</ID>
              <Description>"Inf Jumps + Slow Fall/No Fall Damage"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
assert(starbound.Star::MovementController::tickMaster+477,74)

starbound.Star::MovementController::tickMaster+477:
db EB

[DISABLE]
starbound.Star::MovementController::tickMaster+477:
db 74
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>140</ID>
              <Description>"Inf Jumps"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,starbound.Star::MovementController::onGround)
define(bytes,0F B6 81 E8 07 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$100,"starbound.exe")

label(code)
label(return)

newmem:
cmp r13l,FF
jne code
// Inf Jumps
mov byte ptr [rcx+000007E8],01
jmp code

code:
  movzx eax,byte ptr [rcx+000007E8]
  jmp return

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>141</ID>
              <Description>"Debug Mode"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(enabledebugmode,starbound.exe,E8 * * * * 84 C0 75 * E8 * * * * F3) //E8 * * * * = call starbound.Star::ClientCommandProcessor::debugDisplayEnabled
alloc(debugger_bkb,5)
debugger_bkb:
  readmem(enabledebugmode,5)
enabledebugmode:
  db 90 90 90 90 90

registersymbol(enabledebugmode)
registersymbol(debugger_bkb)

[DISABLE]

enabledebugmode:
  readmem(debugger_bkb,5)

unregistersymbol(enabledebugmode)
unregistersymbol(debugger_bkb)
dealloc(debugger_bkb)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>142</ID>
              <Description>"Player Coords"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,starbound.Star::TechController::backDrawables+B0)
define(bytes,4C 8B C0 48 8D 4B 30)

[ENABLE]
assert(address,bytes)
alloc(newmem,$100,starbound.Star::TechController::backDrawables+B0)

label(code)
label(return)
label(pcoords)
registersymbol(pcoords)

newmem:
mov [pcoords],rcx

code:
  mov r8,rax
  lea rcx,[rbx+30]
  jmp return

pcoords:
dq 0

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(pcoords)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>143</ID>
                  <Description>"X-Coord"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[pcoords]+308</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>144</ID>
                  <Description>"Y-Coord"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[pcoords]+3a8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>145</ID>
              <Description>"Cursor Coords"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,starbound.Star::Player::aim+25)
define(bytes,F2 0F 11 87 3C 06 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$100,"starbound.exe")

label(code)
label(return)

newmem:

code:
  mov [cursor_coords],rdi
  movsd [rdi+0000063C],xmm0
  jmp return

cursor_coords:
dq 0

address:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(cursor_coords)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>146</ID>
                  <Description>"Cursor Postion 1"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[cursor_coords]+63C</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>147</ID>
                  <Description>"Cursor Position 2"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[cursor_coords]+640</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>174</ID>
              <Description>"Gravity"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
assert(starbound.Star::WorldTemplate::gravity+23,F3 0F 10 40 34)
alloc(newmem,$100,"starbound.exe")

label(code)
label(return)
label(gravityptr)
registersymbol(gravityptr)

newmem:
cmp [rsp+68],starbound.Star::WorldClient::gravity+147 // Return Address for Gravity
jne code
mov [gravityptr],rax

code:
  movss xmm0,[rax+34]
  jmp return

gravityptr:
dq 0

starbound.Star::WorldTemplate::gravity+23:
  jmp newmem
return:

[DISABLE]

starbound.Star::WorldTemplate::gravity+23:
  db F3 0F 10 40 34

dealloc(newmem)
unregistersymbol(gravityptr)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>175</ID>
                  <Description>"Gravity"</Description>
                  <VariableType>Float</VariableType>
                  <Address>[gravityptr]+34</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>150</ID>
              <Description>"Full Bright"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(fullbright,starbound.exe,74 * 44 89 75 28)
alloc(fullbright_bkb,2)
fullbright_bkb:
  readmem(fullbright,2)
fullbright:
  db 90 90

registersymbol(fullbright)
registersymbol(fullbright_bkb)

[DISABLE]

fullbright:
  readmem(fullbright_bkb,2)

unregistersymbol(fullbright)
dealloc(fullbright_bkb)
unregistersymbol(fullbright_bkb)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>151</ID>
              <Description>"Fixed Camera"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(fixedcamera,starbound.exe,E8 * * * * 84 C0 0F 85 * * * * 48 8D 55 80)
alloc(fixedcamera_bkb,5)
fixedcamera_bkb:
  readmem(fixedcamera,5)
fixedcamera:
  db 90 90 90 90 90

registersymbol(fixedcamera_bkb)
registersymbol(fixedcamera)

[DISABLE]

fixedcamera:
  readmem(fixedcamera_bkb,5)

unregistersymbol(fixedcamera)
dealloc(fixedcamera_bkb)
unregistersymbol(fixedcamera_bkb)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>152</ID>
              <Description>"Teleport Activation"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{
RCX==Base to Coords
+308=x-Coord
+3A8=y-Coord
}

define(address,starbound.Star::Player::render+1CE)
define(bytes,33 C9 48 89 8D A8 02 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000,starbound.Star::Player::render+1CE)

label(code)
label(return)
label(savec)
label(save)
label(load)
label(savef)
label(loadf)
registersymbol(savec)
registersymbol(savef)
registersymbol(loadf)

newmem:
cmp [savef],1
je save
cmp [loadf],1
je load
jmp code

save:
mov [savef],0
push rax
mov rax,[rcx+308]
mov [savec],rax
mov rax,[rcx+3A8]
mov [savec+8],rax
pop rax
jmp code

load:
mov [loadf],0
push rax
mov rax,[savec]
mov [rcx+308],rax
mov rax,[savec+8]
mov [rcx+3A8],rax
pop rax
jmp code

code:
  xor ecx,ecx
  mov [rbp+000002A8],rcx
  jmp return

savef:
dd 0

loadf:
dd 0

savec:
dq 0

// Nothing Benease this because theres y stored

address:
  jmp newmem
  nop
  nop
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(savec)
unregistersymbol(savef)
unregistersymbol(loadf)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>153</ID>
                  <Description>"Save Location"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>savef</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>154</ID>
                  <Description>"Teleport "</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>loadf</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>155</ID>
                  <Description>"Saved X-Pos"</Description>
                  <VariableType>Float</VariableType>
                  <Address>savec</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>156</ID>
                  <Description>"Saved Y-Pos"</Description>
                  <VariableType>Float</VariableType>
                  <Address>savec+8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>157</ID>
              <Description>"Teleport to Cursor Activation"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,starbound.Star::Player::setNetStates+B0)
define(bytes,F3 0F 10 8B 3C 06 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$100,"starbound.exe")

label(code)
label(return)
label(cursortelex)
label(cursorteley)
registersymbol(cursortelex)
registersymbol(cursorteley)

newmem:
push rdi
mov rdi,[rbx+0000063C]
mov [cursortelex],rdi
mov rdi,[rbx+00000640]
mov [cursorteley],rdi
pop rdi

code:
  movss xmm1,[rbx+0000063C]
  jmp return

cursortelex:
dq 0

cursorteley:
dq 0

address:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(cursortelex)
unregistersymbol(cursorteley)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>158</ID>
                  <Description>"Teleport to Cursor Activation Player"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
assert(starbound.Star::MovementController::collisionBody+4F,F3 0F 10 93 08 03 00 00)
alloc(newmem,$1000,"starbound.exe")

label(code)
label(return)
label(teleporttocursor)
label(teleporttocursor_enable)
registersymbol(teleporttocursor_enable)

newmem:
cmp r12d,FFFFFFFF
jne code
cmp [rbx+8C],3ECCCCCD
jne code
cmp [rbx+DC],3F000000
jne code

cmp [teleporttocursor_enable],1
je teleporttocursor

code:
  movss xmm2,[rbx+00000308]
  jmp return

teleporttocursor:
mov [teleporttocursor_enable],0
push rdi
mov rdi,[cursortelex]
mov [rbx+00000308],rdi
mov rdi,[cursorteley]
mov [rbx+000003A8],rdi
pop rdi
jmp code

teleporttocursor_enable:
dd 0

starbound.Star::MovementController::collisionBody+4F:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]

starbound.Star::MovementController::collisionBody+4F:
  db F3 0F 10 93 08 03 00 00

dealloc(newmem)
unregistersymbol(teleporttocursor_enable)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>159</ID>
                      <Description>"Telport to Cursor"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                      <VariableType>4 Bytes</VariableType>
                      <Address>teleporttocursor_enable</Address>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>4</Key>
                          </Keys>
                          <Value>1</Value>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>160</ID>
              <Description>"Craft whenever you want"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(crafteveything,starbound.exe,E8 * * * * 0F B6 D0 48 8B CB E8 * * * * 49 8B 5D)
alloc(crafteveything_bkb,5)
crafteveything_bkb:
  readmem(crafteveything,5)
crafteveything:
db 90 90 90 90 90

registersymbol(crafteveything)
registersymbol(crafteveything_bkb)

[DISABLE]

crafteveything:
  readmem(crafteveything_bkb,5)

unregistersymbol(crafteveything_bkb)
unregistersymbol(crafteveything)
dealloc(crafteveything_bkb)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>181</ID>
              <Description>"Mech Energy"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>// xmm0 == current _ 0     double
// xmm3 == 0 _ max _ 0 _ 0 float
define(address,starbound.luaV_settable+A3)
define(bytes,41 0F 11 06 C6 47 0A 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$100,"starbound.exe"+45C63)

label(code)
label(return)
label(mechptr)
label(infmechf)
registersymbol(infmechf)
registersymbol(mechptr)

newmem:
cmp [rsp+10],starbound.math_max
jne code
cmp [rsp+48],starbound.luaV_execute+361 // Return Address
jne code
cmp [r14],0
je code
cmp [r14+98],'lava'
jne code
// Get Mech Pointer
mov [mechptr],r14
cmp [infmechf],1
jne code
// Acctually do stuff
sub rsp,16
movdqu [rsp],xmm2
movaps xmm2,xmm3
shufps xmm2,xmm2,55 // Now xmm2 = max _ max _ max _ max
cvtss2sd xmm0,xmm2
movdqu xmm2,[rsp]
add rsp,16

code:
  movups [r14],xmm0
  mov byte ptr [rdi+0A],00
  jmp return

mechptr:
dq 0

infmechf:
dd 0

address:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(mechptr)
unregistersymbol(infmechf)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>183</ID>
                  <Description>"Current Mech Energy"</Description>
                  <VariableType>Double</VariableType>
                  <Address>[mechptr]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>185</ID>
                  <Description>"Inf Mech Energy"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
[ENABLE]
writeBytes("infmechf",1)

[DISABLE]
writeBytes("infmechf",0)
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>161</ID>
              <Description>"Ship Level"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
assert(starbound.Star::ShipUpgrades::ShipUpgrades+16,8B 02 89 01 8B 42 04)
alloc(newmem,$100,"starbound.exe")

label(code)
label(return)
label(shiplvl)
registersymbol(shiplvl)

newmem:
cmp [rsp+38],starbound.Star::ServerClientContext::shipUpgrades+4C // Return Address
jne code
mov [shiplvl],rdx

code:
  mov eax,[rdx]
  mov [rcx],eax
  mov eax,[rdx+04]
  jmp return

shiplvl:
dq 0

starbound.Star::ShipUpgrades::ShipUpgrades+16:
  jmp newmem
  nop
  nop
return:

[DISABLE]

starbound.Star::ShipUpgrades::ShipUpgrades+16:
  db 8B 02 89 01 8B 42 04

dealloc(newmem)
unregistersymbol(shiplvl)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>162</ID>
                  <Description>"Ship Level"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>[shiplvl]</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>165</ID>
              <Description>"Get Is admin Pointer"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,"starbound.exe"+1AB040)
define(bytes,0F B6 81 98 03 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$100,"starbound.exe"+1AB040)

label(code)
label(return)
label(isadminptr)
registersymbol(isadminptr)

newmem:
mov [isadminptr],rcx

code:
  movzx eax,byte ptr [rcx+00000398]
  jmp return

isadminptr:
dq 0

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
unregistersymbol(isadminptr)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>166</ID>
                  <Description>"Is Player Admin?"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>Byte</VariableType>
                  <Address>[isadminptr]+398</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <Value>0</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>By Bloodybone
</Comments>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"starbound.exe"+13C50</Address>
      <Comment>Loop over String
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"starbound.exe"+4EC53C</Address>
      <Comment>get Resource Pointer of String
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"starbound.exe"+4ECBB0</Address>
      <Comment>rsp+28 == Max
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"starbound.exe"+4ED1B3</Address>
      <Comment>New Stat
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"starbound.exe"+4ED1B8</Address>
      <Comment>*This
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
